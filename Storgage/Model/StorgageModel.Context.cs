//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Weezlabs.Storgage.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class storgageEntities : DbContext
    {
        public storgageEntities()
            : base("name=storgageEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<FilterRootDictionary> FilterRootDictionaries { get; set; }
        public virtual DbSet<Invoice> Invoices { get; set; }
        public virtual DbSet<Message> Messages { get; set; }
        public virtual DbSet<PhoneVerificationStatus> PhoneVerificationStatus { get; set; }
        public virtual DbSet<PhotoLibrary> PhotoLibraries { get; set; }
        public virtual DbSet<Rating> Ratings { get; set; }
        public virtual DbSet<Receipt> Receipts { get; set; }
        public virtual DbSet<SizeType> SizeTypes { get; set; }
        public virtual DbSet<Space> Spaces { get; set; }
        public virtual DbSet<SpaceBusy> SpaceBusies { get; set; }
        public virtual DbSet<SpaceType> SpaceTypes { get; set; }
        public virtual DbSet<TrainingSet> TrainingSets { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserDevice> UserDevices { get; set; }
        public virtual DbSet<Zip> Zips { get; set; }
        public virtual DbSet<SpaceAccessType> SpaceAccessTypes { get; set; }
        public virtual DbSet<Chat> Chats { get; set; }
        public virtual DbSet<ChatMember> ChatMembers { get; set; }
        public virtual DbSet<MessageDeliveredStatus> MessageDeliveredStatus2 { get; set; }
        public virtual DbSet<MessageOffer> MessageOffers { get; set; }
        public virtual DbSet<MessageOfferStatus> MessageOfferStatus { get; set; }
        public virtual DbSet<RentPeriodType> RentPeriodTypes { get; set; }
        public virtual DbSet<MessageOfferHistory> MessageOfferHistories { get; set; }
        public virtual DbSet<EmailVerificationStatus> EmailVerificationStatus { get; set; }
        public virtual DbSet<RefreshToken> RefreshTokens { get; set; }
        public virtual DbSet<PaymentPoint> PaymentPoints { get; set; }
        public virtual DbSet<PaymentPointType> PaymentPointTypes { get; set; }
        public virtual DbSet<RootDictionary> RootDictionaries { get; set; }
        public virtual DbSet<Abuse> Abuses { get; set; }
        public virtual DbSet<AbuseRating> AbuseRatings { get; set; }
        public virtual DbSet<AbuseSpace> AbuseSpaces { get; set; }
        public virtual DbSet<AbuseType> AbuseTypes { get; set; }
        public virtual DbSet<AbuseTypeDictionary> AbuseTypeDictionaries { get; set; }
        public virtual DbSet<Filter> Filters { get; set; }
    
        [DbFunction("storgageEntities", "fnMessageDeliveredStatus")]
        public virtual IQueryable<fnMessageDeliveredStatus_Result> fnMessageDeliveredStatus()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnMessageDeliveredStatus_Result>("[storgageEntities].[fnMessageDeliveredStatus]()");
        }
    
        public virtual int spUserDel(string userList)
        {
            var userListParameter = userList != null ?
                new ObjectParameter("userList", userList) :
                new ObjectParameter("userList", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUserDel", userListParameter);
        }
    
        public virtual int spSpaceGetForecastRate(Nullable<System.Guid> sizeTypeId, string zipCode, ObjectParameter forecastedRate)
        {
            var sizeTypeIdParameter = sizeTypeId.HasValue ?
                new ObjectParameter("SizeTypeId", sizeTypeId) :
                new ObjectParameter("SizeTypeId", typeof(System.Guid));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSpaceGetForecastRate", sizeTypeIdParameter, zipCodeParameter, forecastedRate);
        }
    
        [DbFunction("storgageEntities", "fnSpaceForecastRateTable")]
        public virtual IQueryable<fnSpaceForecastRateTable_Result> fnSpaceForecastRateTable(Nullable<System.Guid> sizeTypeId, Nullable<System.Guid> zipId)
        {
            var sizeTypeIdParameter = sizeTypeId.HasValue ?
                new ObjectParameter("SizeTypeId", sizeTypeId) :
                new ObjectParameter("SizeTypeId", typeof(System.Guid));
    
            var zipIdParameter = zipId.HasValue ?
                new ObjectParameter("ZipId", zipId) :
                new ObjectParameter("ZipId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnSpaceForecastRateTable_Result>("[storgageEntities].[fnSpaceForecastRateTable](@SizeTypeId, @ZipId)", sizeTypeIdParameter, zipIdParameter);
        }
    }
}
